/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Other/File.java to edit this template
 */
package GraphProblemsPartII;
import java.util.*;
/**
 *Date :05/25/2024
 *https://leetcode.com/problems/minimize-malware-spread-ii/
 * @author parth
 */
public class MinimizeMalwareSpreadIIDFS {

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // TODO code application logic here
    }
    public static int minMalwareSpread(int[][] graph, int[] initial){
        if(initial.length == 1){
            return initial[0];
        }
        
        int minSize = Integer.MAX_VALUE; 
        int min_idx = -1;
        
        for(int i = 0; i < initial.length;i++){
            HashSet<Integer> infected = new HashSet<>(); //this is basically to like a visited array 
                                                //and also acts as size of infected node
            
            for(int j = 0; j < initial.length;j++){
                if(i!=j){ //this is basically simulating the infected node is removed and the other nodes are checked 
                    
                    dfs(infected,graph,initial[j], initial[i]);
                    //initial[j] == currentNode 
                    //initial[i] == removeNode
                }
            }
            
            if(infected.size() < minSize){
                
                //update the values 
                minSize = infected.size();
                min_idx = initial[i];
            }
            else if(infected.size() == minSize){
                min_idx = Math.min(min_idx, initial[i]);
            }
            
        }
        return min_idx;
        
    }
    
    public static void dfs(HashSet<Integer> infected, int[][] graph, int currentNode, int removeNode){
        
        //if the currentNode has already been visited or currentNode value equal removeNode  return;
        if(infected.contains(currentNode) || currentNode == removeNode){
            return;           
        }
        
         //Basically below line mines that the currentNode if it has not been visited and its not equal to removeNode
        //than do dfs on the currentNode 
        
        infected.add(currentNode);
        
        
        for(int j = 0; j < graph[currentNode].length;j++){
            //This the edges of the infected Node
            if(graph[currentNode][j] == 1){
                //do a dfs 
                dfs(infected,graph,j,removeNode);
            }
        }
    }
}
